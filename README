Deploy Fabric to kubernetes

Introduction:
Fabric requires 3 types of nodes:
CA: registers identities, issue enrollment Cert
Orderer: establishes consensus
Peer: stores the ledger and couchDB world state

Files:
The file ca_values, ord_values, peer1_values, peer2_value2 yaml contains helm values.
The hlf-ca, hlf-couchdb, hlf-ord, hlf-peer, postgresql folders are Helm chart files
The config folder contains yaml files for creating pods.
We use helm v3.4.1

Sequence:

# create namespace
kubectl create namespace bc

# install postgres helm chart
helm install postgres ./postgresql/ -n bc

# delete existing helm release
helm delete ca --namespace bc

# install HLF CA helm chart from helm release folder
helm install ca ./hlf-ca/ --namespace bc -f ./ca_values.yaml
# or completely override chart fullname 
helm install ca ./hlf-ca/ --set fullnameOverride=ca-orderer-hlf-ca -n bc

# we use ca-client to do orderer registration, enrollment
### 
CA admins register users, a process in which the CA admin gives an enroll ID and secret 
(these are similar to a username and password) to an identity and assigns it a role and 
any required attributes. The CA admin then gives this enroll ID and secret to the ultimate 
user of the identity. The user can then execute a Fabric CA client enroll command using 
this enroll ID and secret, returning the public/private key pair containing the role and 
attributes assigned by the CA admin. 
###

# create a ca-client pod
kubectl -n bc create -f ./config/ca-client-pod.yaml

# copy the pem file from ca-orderer to ca-client
kubectl -n bc cp ca-orderer-hlf-ca-<random_string>:/var/hyperledger/fabric-ca/msp/certs/ca-orderer-hlf-ca-cert.pem ./output/tls-cert.pem
kubectl -n bc cp ./output/tls-cert.pem ca-client:/tmp

# enroll admin
kubectl -n bc exec ca-client -- sh -c "FABRIC_CA_CLIENT_HOME=/tmp/admin fabric-ca-client enroll --tls.certfiles /tmp/tls-cert.pem -u http://admin:adminpw@ca-orderer-hlf-ca.bc.svc.cluster.local:7054"
# register an orderer as admin
kubectl -n bc exec ca-client -- sh -c "FABRIC_CA_CLIENT_HOME=/tmp/admin fabric-ca-client register --tls.certfiles /tmp/tls-cert.pem --id.name orderer0 --id.type orderer --id.secret orderer0pw"
# enroll orderer
kubectl -n bc exec ca-client -- sh -c "FABRIC_CA_CLIENT_HOME=/tmp/orderer0 fabric-ca-client enroll --tls.certfiles /tmp/tls-cert.pem -u http://orderer0:orderer0pw@ca-orderer-hlf-ca.bc.svc.cluster.local:7054 --csr.hosts orderer0-hlf-ord.bc.svc.cluster.local
# enroll order for TLS
kubectl -n bc exec ca-client -- sh -c "FABRIC_CA_CLIENT_HOME=/tmp/orderer0-tls fabric-ca-client enroll --tls.certfiles /tmp/tls-cert.pem --enrollment.profile tls -u http://orderer0:orderer0pw@ca-orderer-hlf-ca.bc.svc.cluster.local:7054 --csr.hosts orderer0-hlf-ord.bc.svc.cluster.local

# copy out the MSP and pem files
kubectl -n bc cp ca-client:/tmp ./output

# delete ca-client pod after end of orderer enrollment
kubectl -n bc delete -f ./config/ca-client-pod.yaml

# create orderer0 orderer msp secret
kubectl -n bc create secret generic orderer0-orderer.msp     
  --from-file ca=$(ls ./output/orderer0/msp/cacerts/*.pem) 
  --from-file secret=$(ls ./output/orderer0/msp/keystore/*_sk | head -1) 
  --from-file cert=$(ls ./output/orderer0/msp/signcerts/*.pem)
  --from-file tls_cert=$(ls ./output/orderer0-tls/msp/signcerts/*.pem) 
  --from-file tls_secret=$(ls ./output/orderer0-tls/msp/keystore/*_sk)
  --from-file admin_secret=$(ls ./output/admin/msp/keystore/*_sk | head -1)
  --from-file config=./config/config.yaml 
  --dry-run=client -o yaml | kubectl apply -f -

# create orderer0 orderer id-cert secret
kubectl -n bc create secret generic hlf--orderer0-orderer-idcert 
  --from-file=cert.pem=$(ls ./output/orderer0/msp/signcerts/*.pem)
  --dry-run=client -o yaml | kubectl apply -f -

# create orderer0 orderer id-key secret
kubectl -n bc create secret generic hlf--orderer0-orderer-idkey 
  --from-file=key.pem=$(ls ./output/orderer0/msp/keystore/*_sk) 
  --dry-run=client -o yaml | kubectl apply -f -

# create the rest of secret for orderer0
kubectl -n bc create secret generic hlf--orderer0-orderer-cacert 
  --from-file=cacert.pem=$(ls ./output/orderer0/msp/cacerts/*.pem) 
  --dry-run=client -o yaml | kubectl apply -f -
kubectl -n bc create secret generic hlf--orderer0-orderer-tls 
  --from-file=tls.crt=$(ls ./output/orderer0-tls/msp/signcerts/*.pem) 
  --from-file=tls.key=$(ls ./output/orderer0-tls/msp/keystore/*_sk) 
  --dry-run=client -o yaml | kubectl apply -f -
kubectl -n bc create secret generic hlf--orderer0-orderer-tlsrootcert 
  --from-file=cacert.pem=$(ls ./output/orderer0/msp/cacerts/*.pem)  
  --dry-run=client -o yaml | kubectl apply -f -
kubectl -n bc create secret generic hlf--orderer0-orderer-admincert 
  --from-file=cert.pem=$(ls ./output/admin/msp/signcerts/*.pem) 
  --dry-run=client -o yaml | kubectl apply -f -

# create orderer configmap for orderer MSP
kubectl -n bc create configmap orderer.msp 
  --from-file ca=$(ls ./output/orderer0/msp/cacerts/*.pem) 
  --from-file admin=$(ls ./output/admin/msp/signcerts/*.pem)
  --dry-run=client -o yaml | kubectl apply -f -

# create secret for orderer MSP
kubectl -n bc create secret generic orderer.msp \
  --from-file ca=$(ls ./output/orderer0/msp/cacerts/*.pem) 
  --from-file admin=$(ls ./output/admin/msp/signcerts/*.pem) 
  --from-file admin_secret=$(ls ./output/admin/msp/keystore/*_sk) 
  --dry-run=client -o yaml | kubectl apply -f -

# create consortium config configmap
kubectl -n bc create configmap consortium-config 
  --from-file configtx-yaml=./config/configtx.yaml 
  --dry-run=client -o yaml | kubectl apply -f -

# create init pod for using in genesis block creation
kubectl -n bc create -f ./config/init-pod.yaml

# create genesis block
kubectl -n bc exec init-cli -- sh \
  -c "FABRIC_CFG_PATH=/etc/hyperledger/config configtxgen -profile SampleMultiNodeEtcdRaft \ 
  -channelID mychannel -outputBlock /tmp/genesis.block"

# copy out genesis block
kubectl -n bc cp init-cli:/tmp/genesis.block ./artifacts/channel/genesis.block

# create secret to hold genesis 
kubectl -n bc create secret generic hlf--genesis --from-file genesis.block=./artifacts/channel/genesis.block --dry-run=client -o yaml | kubectl apply -f -

# delete the pod
kubectl -n bc delete -f ./config/init-pod.yaml

# install HLF orderer helm chart from helm release folder
helm install orderer ./hlf-ord/ --namespace bc -f ./ord_values.yaml
helm install orderer ./hlf-ord/ --set fullnameOverride=orderer0-hlf-ca -n bc

# create ca client pod
kubectl -n bc create -f ./config/ca-client-pod.yaml

# copy in msp files
kubectl -n bc cp ./output ca-client:/tmp/clients

# Register a peer
kubectl -n bc exec ca-client -- sh -c "FABRIC_CA_CLIENT_HOME=/tmp/clients/admin fabric-ca-client register --tls.certfiles /tmp/clients/tls-cert.pem --id.name peer1 --id.type peer --id.secret peer1pw"

# Enroll as a peer
kubectl -n bc exec ca-client -- sh -c "FABRIC_CA_CLIENT_HOME=/tmp/clients/peer1 fabric-ca-client enroll --tls.certfiles /tmp/clients/tls-cert.pem -u http://peer1:peer1pw@ca-orderer-hlf-ca.bc.svc.cluster.local:7054 --csr.hosts peer1-orderer0-hlf-peer.bc.svc.cluster.local"

# Enroll as a peer for TLS
kubectl -n bc exec ca-client -- sh -c "FABRIC_CA_CLIENT_HOME=/tmp/clients/peer1-tls fabric-ca-client enroll --tls.certfiles /tmp/clients/tls-cert.pem --enrollment.profile tls -u http://peer1:peer1pw@ca-orderer-hlf-ca.bc.svc.cluster.local:7054 --csr.hosts peer1-orderer0-hlf-peer.bc.svc.cluster.local"

# copy out the msp files
kubectl -n bc cp ca-client:/tmp/clients ./outputpeer1

# create secret to hold peer msp 
kubectl -n bc create secret generic peer1-org1.msp     
  --from-file ca=$(ls ./outputpeer1/peer1/msp/cacerts/*.pem) 
  --from-file secret=$(ls ./outputpeer1/peer1/msp/keystore/*_sk | head -1) 
  --from-file cert=$(ls ./outputpeer1/peer1/msp/signcerts/*.pem)
  --from-file tls_cert=$(ls ./outputpeer1/peer1-tls/msp/signcerts/*.pem) 
  --from-file tls_secret=$(ls ./outputpeer1/peer1-tls/msp/keystore/*_sk)
  --from-file admin_secret=$(ls ./outputpeer1/admin/msp/keystore/*_sk | head -1)
   --from-file config=./config/config.yaml 
  --dry-run=client -o yaml | kubectl apply -f -

# create secrets for peer
kubectl -n bc create secret generic hlf--peer1-org1-idcert --from-file=cert.pem=$(ls ./outputpeer1/peer1/msp/signcerts/*.pem) --dry-run=client -o yaml | kubectl apply -f -
kubectl -n bc create secret generic hlf--peer1-org1-idkey --from-file=key.pem=$(ls ./outputpeer1/peer1/msp/keystore/*_sk | head -1) --dry-run=client -o yaml | kubectl apply -f -
kubectl -n bc create secret generic hlf--${PEER_NAME}-${ORG_NAME}-cacert --from-file=cacert.pem=${CACERT_FILE} --dry-run=client -o yaml | kubectl apply -f -
kubectl -n bc create secret generic hlf--${PEER_NAME}-${ORG_NAME}-tls --from-file=tls.crt=${TLS_CERT_FILE} --from-file=tls.key=${TLS_SK_FILE} --dry-run=client -o yaml | kubectl apply -f -
kubectl -n bc create secret generic hlf--${PEER_NAME}-${ORG_NAME}-tlsrootcert --from-file=cacert.pem=${CACERT_FILE} --dry-run=client -o yaml | kubectl apply -f -
kubectl -n bc create secret generic hlf--peer1-org1-admincert --from-file=cert.pem=$(ls ./outputpeer1/peer1/msp/signcerts/*.pem) --dry-run=client -o yaml | kubectl apply -f -
kubectl -n bc create secret generic hlf--peer1-org1-signcert --from-file=cert.pem=$(ls ./outputpeer1/peer1/msp/signcerts/*.pem) --dry-run=client -o yaml | kubectl apply -f -

kubectl -n bc create secret generic hlf--pee1-org1-adminkey --from-file=key.pem=$(ls ./outputpeer1/admin/msp/keystore/*_sk | head -1) --dry-run=client -o yaml | kubectl apply -f -

# install Couchdb helm chart from helm release folder
helm install couchdb ./hlf-couchdb/ --set fullnameOverride=cdb-peer-org1-hlf-couchdb -n bc
# install HLF peer helm chart from helm release folder
helm install peer ./hlf-peer/ --set fullnameOverride=peer-org1-hlf-peer -n bc

# create a client cli pod
kubectl -n bc create -f ./config/client-cli.yaml

# copy configtx
kubectl -n bc exec -it cli -- bash -c \
  "cp /etc/hyperledger/config/configtx.yaml /etc/hyperledger/fabric"

# configtxgen
kubectl -n bc exec -it cli -- bash -c \
  "configtxgen -profile AllOrgChannel -channelID mychannel \
    -outputCreateChannelTx /etc/hyperledger/channels/mychannel.tx"

# create channel
kubectl -n bc exec -it cli -- bash -c \
  "peer channel create -c mychannel -f /etc/hyperledger/channels/mychannel.tx \
    -o orderer0-hlf-ord.bc.svc.cluster.local:7050 \
    --outputBlock /etc/hyperledger/channels/mychannel.block \ 
    --cafile /etc/hyperledger/msps/orderer/cacerts/cert.pem --tls"

Error:
Cannot run peer because error when setting up MSP of type bccsp from directory 
/etc/hyperledger/msps/org1: KeyMaterial not found in SigningIdentityInfo

kubectl -n bc cp cli:/etc/hyperledger/channels/mychannel.block \
  ./artifacts/channel/mychannel.block

# join channel
kubectl -n bc  exec -it cli -- bash -c \
  "peer channel join -b /etc/hyperledger/channels/mychannel.block --tls"

# check channel list
kubectl exec cli -n bc -- peer channel list

# fetch channel
kubectl exec -n bc cli -- peer channel fetch config /etc/hyperledger/channels/mychannel.block -c mychannel -o orderer0-hlf-ord.bc.svc.cluster.local:7050

# delete client cli pod
kubectl -n bc delete -f ./config/client-cli.yaml