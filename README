Deploy Fabric to kubernetes

We use helm v3.4.1

Fabric  requires 3 types of nodes:
CA, registers identities, issue enrollment Cert
Orderer, establishes consensus
Peer, stores the ledger and couchDB world state

The file ca_values, peer1_values, peer2_value2 yaml are helm value files.

# create namespace
kubectl create namespace bc

# if get helm chart from helm repo
helm repo add stable https://charts.helm.sh/stable
helm search repo stable | grep hlf

# delete existing helm release
helm delete ca --namespace bc

# install CA helm chart to kubernetes cluster
helm install ca stable/hlf-ca --namespace bc -f ./ca_values.yaml    # from helm repo
helm install ca ./hlf-ca/ --namespace bc -f ./ca_values.yaml        # from helm release

# save CA POD name
export CA_POD=$(kubectl get pods --namespace bc -l "app=hlf-ca,release=ca" -o jsonpath="{.items[0].metadata.name}")

# check CA POD log
kubectl logs -n bc $CA_POD | grep "Listening on"
# check the events
kubectl get events -n bc

# check we don't have certificate
kubectl exec -n bc $CA_POD -- cat /var/hyperledger/fabric-ca/msp/signcerts/cert.pem
# create the fabric CA identity
kubectl exec -n bc $CA_POD -- bash -c 'fabric-ca-client enroll -d -u http://$CA_ADMIN:$CA_PASSWORD@$SERVICE_DNS:7054'
# check again, now we have certificate
kubectl exec -n bc $CA_POD -- cat /var/hyperledger/fabric-ca/msp/signcerts/cert.pem

# register org adm in blockchain
kubectl exec -n bc $CA_POD -- fabric-ca-client register --id.name org-admin --id.secret OrgAdm1nPW --id.attrs 'admin=true:ecert'
# get identity of org admin
kubectl exec -n bc $CA_POD -- fabric-ca-client identity list --id org-admin

# get the CA INGRESS address
CA_INGRESS=$(kubectl get ingress -n bc -l "app=hlf-ca,release=ca" -o jsonpath="{.items[0].spec.rules[0].host}")
# test with curl
curl https://$CA_INGRESS/cainfo

# enroll the org admin
FABRIC_CA_CLIENT_HOME=./config ../fabric-samples/bin/fabric-ca-client enroll -u https://org-admin:OrgAdm1nPW@$CA_INGRESS -M ./MSP

# create a secret to hold admin cert
ORG_CERT=$(ls ./config/MSP/admincerts/cert.pem)
kubectl create secret generic -n bc hlf--org-admincert --from-file=cert.pem=$ORG_CERT

# find the admin key and create secret to hold admin key
ORG_KEY=$(ls ./config/MSP/keystore/*_sk)
kubectl create secret generic -n bc hlf--org-adminkey --from-file=key.pem=$ORG_KEY

# create secret to hold CA cert
CA_CERT=$(ls ./config/MSP/cacerts/*.pem)
kubectl create secret generic -n bc hlf--ca-cert --from-file=cacert.pem=$CA_CERT

# generate the genesis block and  channel
cd .config
create the configtx.yaml
../../fabric-samples/bin/configtxgen -profile OrdererGenesis -outputBlock ./genesis.block -channelID mychannel
# add genesis block as secret
kubectl create secret generic -n bc hlf--genesis --from-file=genesis.block

# generate channel
../../fabric-samples/bin/configtxgen -profile MyChannel -channelID mychannel -outputCreateChannelTx ./mychannel.tx
# add channel as secret
kubectl create secret generic -n bc hlf--channel --from-file=mychannel.tx

# register orderer with CA
# still executing command in config folder
kubectl exec -n bc $CA_POD -- fabric-ca-client register --id.name ord --id.secret ord_pw --id.type orderer
FABRIC_CA_CLIENT_HOME=./config fabric-ca-client enroll -d -u https://ord:ord_pw@$CA_INGRESS -M ord_MSP

# install orderer helm chart 
helm install orderer ./hlf-ord  --namespace bc -f ./ord_values.yaml

# first export NUM=1
export NUM=1      # then export NUM=2
# register peer with CA
kubectl exec -n bc $CA_POD -- fabric-ca-client register --id.name peer${NUM} --id.secret peer${NUM}_pw --id.type peer
FABRIC_CA_CLIENT_HOME=./config fabric-ca-client enroll -d -u https://peer${NUM}:peer${NUM}_pw@$CA_INGRESS -M peer${NUM}_MSP

# save the peer cert in secret
NODE_CERT=$(ls ./config/peer${NUM}_MSP/signcerts/*.pem)
kubectl create secret generic -n bc hlf--peer${NUM}-idcert --from-file=cert.pem=${NODE_CERT}

# save the peer key in secret
NODE_KEY=$(ls ./config/peer${NUM}_MSP/keystore/*_sk)
kubectl create secret generic -n bc hlf--peer${NUM}-idkey --from-file=key.pem=${NODE_KEY}

# install coucdDB helm chart
helm install -n cdb-peer${NUM} ./hlf-couchdb --namespace bc -f ./cdb-peer${NUM}_values.yaml

# install peer helm chart
helm install peer${NUM} ./hlf-peer  --namespace bc -f ./peer${NUM}_values.yaml

# save the PEER POD name
PEER_POD=$(kubectl get pods -n bc -l "app=hlf-peer,release=peer${NUM}" -o jsonpath="{.items[0].metadata.name}")

# create channel (ONLY do this on peer 1)
kubectl exec -n bc $PEER_POD -- peer channel create -o ord1-hlf-ord.blockchain.svc.cluster.local:7050 -c mychannel -f /hl_config/channel/mychannel.tx

# join channel
kubectl exec -n bc $PEER_POD -- peer channel fetch config /var/hyperledger/mychannel.block -c mychannel -o ord1-hlf-ord.blockchain.svc.cluster.local:7050
kubectl exec -n bc $PEER_POD -- bash -c 'CORE_PEER_MSPCONFIGPATH=$ADMIN_MSP_PATH peer channel join -b /var/hyperledger/mychannel.block'

# check channel list
kubectl exec $PEER_POD -n bc -- peer channel list

# check gcloud disk
gcloud  compute disks delete 
gcloud  compute disks delete  <disk name>
